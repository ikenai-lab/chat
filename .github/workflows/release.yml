# .github/workflows/release.yml

name: Release

on:
  push:
    branches:
      - release

jobs:
  build-tauri:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm install
        working-directory: ./frontend

      - name: Install backend dependencies (Linux/macOS)
        if: matrix.platform != 'windows-latest'
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          pip install pyinstaller
        working-directory: ./backend
        
      - name: Install backend dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          python -m venv venv
          ./venv/Scripts/Activate.ps1
          pip install -r requirements.txt
          pip install pyinstaller
        working-directory: ./backend

      - name: Build backend executable (Linux/macOS)
        if: matrix.platform != 'windows-latest'
        run: |
          source venv/bin/activate
          LLAMA_LIB_PATH=$(find venv -name "libllama.*" | head -n 1)
          echo "Found libllama at: $LLAMA_LIB_PATH"
          pyinstaller main.py --name backend --onefile --noconsole --add-data "$LLAMA_LIB_PATH:llama_cpp/lib"
        working-directory: ./backend

      - name: Build backend executable (Windows)
        if: matrix.platform == 'windows-latest'
        shell: pwsh
        run: |
          ./venv/Scripts/Activate.ps1
          $LLAMA_LIB_PATH = Get-ChildItem -Path ./venv -Filter "llama.dll" -Recurse | Select-Object -First 1 | ForEach-Object { $_.FullName }
          Write-Host "Found llama.dll at: $LLAMA_LIB_PATH"
          pyinstaller main.py --name backend --onefile --noconsole --add-data "$LLAMA_LIB_PATH;llama_cpp/lib"
        working-directory: ./backend

      - name: Copy backend to Tauri binaries
        shell: bash
        run: |
          mkdir -p frontend/src-tauri/binaries
          if [[ "${{ matrix.platform }}" == "windows-latest" ]]; then
            cp backend/dist/backend.exe "frontend/src-tauri/binaries/backend-x86_64-pc-windows-msvc.exe"
          elif [[ "${{ matrix.platform }}" == "macos-latest" ]]; then
            cp backend/dist/backend "frontend/src-tauri/binaries/backend-aarch64-apple-darwin"
          else
            cp backend/dist/backend "frontend/src-tauri/binaries/backend-x86_64-unknown-linux-gnu"
          fi

      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          projectPath: ./frontend
          
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          # MODIFIED: Use a static tag name
          tag_name: v0.1.0
          name: "Release v0.1.0"
          files: |
            frontend/src-tauri/target/release/bundle/**/*.msi
            frontend/src-tauri/target/release/bundle/**/*.dmg
            frontend/src-tauri/target/release/bundle/**/*.AppImage
            frontend/src-tauri/target/release/bundle/**/*.deb
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
